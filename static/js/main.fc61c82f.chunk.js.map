{"version":3,"sources":["../node_modules/easybase-react/dist lazy groupOptions: {} namespace object","logo.svg","Home.js","OktaSignInWidget.js","Login.js","Protected.js","config.js","AppWithRouterAccess.js","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","Home","history","useHistory","useOktaAuth","oktaAuth","authState","login","a","push","logout","signOut","button","isAuthenticated","onClick","to","OktaSignInWidget","config","onSuccess","onError","widgetRef","useRef","useEffect","current","widget","OktaSignIn","showSignInToGetTokens","el","catch","remove","ref","Login","pathname","tokens","handleLoginRedirect","err","console","log","Protected","oktaAuthConfig","issuer","clientId","redirectUri","window","location","origin","oktaSignInConfig","baseUrl","authParams","responseType","responseMode","scope","idpDisplay","idps","OktaAuth","AppWithRouterAccess","restoreOriginalUri","_oktaAuth","originalUri","replace","toRelativeUrl","onAuthRequired","path","exact","component","render","LoginCallback","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","accountInput","height","borderColor","borderWidth","width","margin","fontSize","textAlign","title","fontWeight","fontStyle","marginBottom","App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc61c82f.chunk.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 135;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\n\r\nfunction onSignIn(googleUser) {\r\n  var profile = googleUser.getBasicProfile();\r\n  console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\r\n  console.log('Name: ' + profile.getName());\r\n  console.log('Image URL: ' + profile.getImageUrl());\r\n  console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.\r\n}\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n  const { oktaAuth, authState } = useOktaAuth();\r\n\r\n  if (!authState) return null;\r\n\r\n  const login = async () => history.push('/login');\r\n  \r\n  const logout = async () => oktaAuth.signOut();\r\n\r\n  const button = authState.isAuthenticated ? \r\n    <button onClick={logout}>Logout</button> :\r\n    <button onClick={login}>Login</button>;\r\n\r\n  return (\r\n    <div>\r\n      <Link to='/'>Home</Link><br/>\r\n      <Link to='/protected'>Protected</Link><br/>\r\n      {button}\r\n    </div>\r\n  );\r\n};\r\nexport default Home;","import React, { useEffect, useRef } from 'react';\r\nimport OktaSignIn from '@okta/okta-signin-widget';\r\nimport '@okta/okta-signin-widget/dist/css/okta-sign-in.min.css';\r\n\r\nconst OktaSignInWidget = ({ config, onSuccess, onError }) => {\r\n  const widgetRef = useRef();\r\n  useEffect(() => {\r\n    if (!widgetRef.current)\r\n      return false;\r\n    \r\n    const widget = new OktaSignIn(config);\r\n\r\n    widget.showSignInToGetTokens({\r\n      el: widgetRef.current,\r\n    }).then(onSuccess).catch(onError);\r\n\r\n    return () => widget.remove();\r\n  }, [config, onSuccess, onError]);\r\n\r\n  return (<div ref={widgetRef} />);\r\n};\r\nexport default OktaSignInWidget;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport OktaSignInWidget from './OktaSignInWidget';\r\nimport { useOktaAuth } from '@okta/okta-react';\r\n\r\nconst Login = ({ config }) => {\r\n  const { oktaAuth, authState } = useOktaAuth();\r\n\r\n  const onSuccess = (tokens) => {\r\n    oktaAuth.handleLoginRedirect(tokens);\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log('error logging in', err);\r\n  };\r\n\r\n  if (!authState) return null;\r\n\r\n  return authState.isAuthenticated ?\r\n    <Redirect to={{ pathname: '/' }}/> :\r\n    <OktaSignInWidget\r\n      config={config}\r\n      onSuccess={onSuccess}\r\n      onError={onError}/>;\r\n};\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nconst Protected = () => <h3>Protected</h3>;\r\nexport default Protected;","const oktaAuthConfig = {\r\n  // Note: If your app is configured to use the Implicit flow\r\n  // instead of the Authorization Code with Proof of Code Key Exchange (PKCE)\r\n  // you will need to add `pkce: false`\r\n  issuer: 'https://dev-69915542.okta.com/oauth2/default',\r\n  clientId: '{0oa19c5i75UVszLOU5d7}',\r\n  redirectUri: window.location.origin + '/login/',\r\n};\r\n\r\nconst oktaSignInConfig = {\r\n  baseUrl: 'https://dev-69915542.okta.com',\r\n  clientId: '{0oa19c5i75UVszLOU5d7}',\r\n  redirectUri: 'https://www.prayiprayer.com',\r\n  authParams: {\r\n    responseType: \"id_token\",\r\n    responseMode: \"fragment\",\r\n    scope: [\r\n        'openid',\r\n        'email',\r\n        'profile',\r\n        'address',\r\n        'phone',\r\n        'groups',\r\n    ],\r\n    // If your app is configured to use the Implicit flow\r\n    // instead of the Authorization Code with Proof of Code Key Exchange (PKCE)\r\n    // you will need to uncomment the below line\r\n  },\r\n  idpDisplay: 'PRIMARY',\r\n  idps: [{\r\n    'type': 'GOOGLE',\r\n    'id': '0oa19c79c0MDkDCKq5d7'\r\n  }]\r\n  // Additional documentation on config options can be found at https://github.com/okta/okta-signin-widget#basic-config-options\r\n};\r\n\r\nexport { oktaAuthConfig, oktaSignInConfig };","import React from 'react';\r\nimport { Route, useHistory, Switch } from 'react-router-dom';\r\nimport { Security, SecureRoute, LoginCallback } from '@okta/okta-react';\r\nimport { OktaAuth, toRelativeUrl } from '@okta/okta-auth-js';\r\nimport Home from './Home';\r\nimport Login from './Login';\r\nimport Protected from './Protected';\r\nimport { oktaAuthConfig, oktaSignInConfig } from './config';\r\n\r\nconst oktaAuth = new OktaAuth(oktaAuthConfig);\r\n\r\nconst AppWithRouterAccess = () => {\r\n  const history = useHistory();\r\n\r\n  const customAuthHandler = () => {\r\n    history.push('/login');\r\n  };\r\n  \r\n  const restoreOriginalUri = async (_oktaAuth, originalUri) => {\r\n    history.replace(toRelativeUrl(originalUri, window.location.origin));\r\n  };\r\n\r\n  return (\r\n    <Security\r\n      oktaAuth={oktaAuth}\r\n      onAuthRequired={customAuthHandler}\r\n      restoreOriginalUri={restoreOriginalUri}\r\n    >\r\n      <Switch>\r\n        <Route path='/' exact={true} component={Home} />\r\n        <SecureRoute path='/protected' component={Protected} />\r\n        <Route path='/login' render={() => <Login config={oktaSignInConfig} />} />\r\n        <Route path='/login/callback' component={LoginCallback} />\r\n      </Switch>\r\n    </Security>\r\n  );\r\n};\r\nexport default AppWithRouterAccess;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n        // <EasybaseProvider ebconfig={ebconfig}>\n        //   <Router />\n        // </EasybaseProvider>\n\nimport AppWithRouterAccess from './AppWithRouterAccess';\nimport { EasybaseProvider, useEasybase } from 'easybase-react';\nimport { useState, useEffect } from 'react';\nimport ebconfig from './ebconfig';\nimport { StyleSheet, Text, View, TextInput, Button } from 'react-native';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <Router>\n          <AppWithRouterAccess/>\n        </Router>\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Hi there\n          Edit oh my....finally...<code>src/App.js</code> and save to reload.\n        </p>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\n\n// function Router() {\n//   const { isUserSignedIn, signOut } = useEasybase();\n\n//   return (\n//     isUserSignedIn() ?\n//       <View style={styles.container}>\n//         <Text>Congrats! You're signed in.</Text>\n//         <Button title=\"Sign Out\" onPress={signOut} />\n//       </View>\n//       :\n//       <Account />\n//   )\n// }\n\nfunction Account() {\n  const [userVal, setUserVal] = useState(\"\");\n  const [passVal, setPassVal] = useState(\"\");\n\n  const { signIn, signUp } = useEasybase();\n\n  const clearInputs = () => {\n    setUserVal(\"\");\n    setPassVal(\"\");\n  }\n\n  const handleSignInPress = async () => {\n    await signIn(userVal, passVal);\n    clearInputs();\n  }\n\n  const handleSignUpPress = async () => {\n    console.log(\"WHAT IS MY USERVAL \" + userVal)\n    const res = await signUp(userVal, passVal, {\n      created_at: new Date().toString\n    });\n    console.log(res);\n    if (res.success) {\n      console.log(\"SIGNING IN...\");\n      await signIn(userVal, passVal);\n    }\n    clearInputs();\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Welcome to React-flix!</Text>\n      <TextInput value={userVal} onChangeText={e => setUserVal(e)} style={styles.accountInput} placeholder=\"Username\" />\n      <TextInput value={passVal} onChangeText={e => setPassVal(e)} style={styles.accountInput} placeholder=\"Password\"/>\n      <View style={{ display: \"flex\", flexDirection: \"row\", marginTop: 30 }}>\n        <Button title=\"Sign In\" onPress={handleSignInPress} />\n        <Button title=\"Sign Up\" onPress={handleSignUpPress} />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  accountInput: {\n    height: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    width: \"75%\",\n    margin: 10,\n    fontSize: 22,\n    textAlign: \"center\"\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: \"500\",\n    fontStyle: \"italic\",\n    marginBottom: 30\n  }\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}